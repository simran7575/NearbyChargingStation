openapi: 3.0.0
info:
  title: Nearby Charging Station API
  description: Creating APIs to find and book nearby charging station for the electric bike
  version: 1.1.0
  contact:
    email: simranbedi7575@gmail.com
    url: "https://google.com"

servers:
  - url: https://nearby-charging-station.herokuapp.com/api/v1
    description: Main (production) server deployed in heroku

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      type: object
      properties:
        __v:
          type: number
        _id:
          type: string
        createdAt:
          type: string
          format: date-time
        phone:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string

    Socket:
      type: object
      properties:
        __v:
          type: number
        _id:
          type: string
        createdAt:
          type: string
          format: date-time
        plugType:
          type: string
          enum: [Type-A, Type-C]
        status:
          type: string
          enum: [free, booked]
        address:
          type: string
        location:
          type: object
          properties:
            type:
              type: string
            coordinates:
              type: array
              items:
                type: number
    Booking:
      type: object
      properties:
        __v:
          type: number
        _id:
          type: string
        createdAt:
          type: string
          format: date-time
        user:
          type: string
        socket:
          type: string
        status:
          type: string
          enum: [Upcoming, Ongoing, Completed, Cancelled]
        unitsConsumed:
          type: number
        cost:
          type: number

    BookingComplete:
      type: object
      properties:
        __v:
          type: number
        _id:
          type: string
        createdAt:
          type: string
          format: date-time
        user:
          type: string
        socket:
          type: string
        status:
          type: string
          enum: [Upcoming, Ongoing, Completed, Cancelled]
        unitsConsumed:
          type: number
        cost:
          type: number
        chargeStartTime:
          type: string
          formate: date-time
        chargeEndTime:
          type: string
          formate: date-time
        durationOfCharge:
          type: number

    BookingWithAddress:
      type: object
      properties:
        __v:
          type: number
        _id:
          type: string
        createdAt:
          type: string
          format: date-time
        user:
          type: string
        socket:
          type: object
          properties:
            _id:
              type: string
            address:
              type: string
        status:
          type: string
          enum: [Upcoming, Ongoing, Completed, Cancelled]
        unitsConsumed:
          type: number
        cost:
          type: number

    BookingWithLocationAndAddress:
      type: object
      properties:
        __v:
          type: number
        _id:
          type: string
        createdAt:
          type: string
          format: date-time
        user:
          type: string
        socket:
          type: object
          properties:
            _id:
              type: string
            address:
              type: string
            location:
              type: object
              properties:
                type:
                  type: string
                coordinates:
                  type: array
                  items:
                    type: number
            plugType:
              type: string
              enum: [Type-A, Type-C]
        status:
          type: string
          enum: [Upcoming, Ongoing, Completed, Cancelled]
        unitsConsumed:
          type: number
        cost:
          type: number

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

paths:
  /signup:
    post:
      tags:
        - User
      summary: sending otp to a new or existing user. two fields - phone number and isLogin (required)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
                - isLogin
              properties:
                phone:
                  phone: string
                  required: true
                isLogin:
                  type: boolean
                  required: true
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  response:
                    type: object
                    properties:
                      to:
                        type: string
                      channel:
                        type: string
                      valid:
                        type: boolean
                      status:
                        type: string
                      lookup:
                        type: object
                        properties:
                          carrier:
                            type: null
                      amount:
                        type: null
                      payee:
                        type: null
                      sendCodeAttempts:
                        type: array
                        items:
                          type: object
                          properties:
                            channel:
                              type: string
                            time:
                              type: string
                              format: date-time
                      dateCreated:
                        type: string
                        format: date-time
                      dateUpdated:
                        type: string
                        format: date-time
                      sna:
                        type: string
        400:
          description: Bad request
        500:
          description: internal server error

  /verify:
    post:
      tags:
        - User
      summary: verifying otp for the new user signing up. required files are - firstname, code and phone. optional fields are - lastname and email.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
                - firstname
                - code
              properties:
                phone:
                  phone: string
                  required: true
                firstname:
                  type: string
                  required: true
                lastname:
                  type: string
                email:
                  type: string
                code:
                  type: string
                  required: true
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        400:
          description: Token Invalid
        500:
          description: internal server error

  /login:
    post:
      tags:
        - User
      summary: verifying otp for the existing user logging in. required files are - code and phone.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
                - code
              properties:
                phone:
                  phone: string
                  required: true
                code:
                  type: string
                  required: true
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        400:
          description: Token Invalid
        500:
          description: internal server error

  /allusers:
    get:
      tags:
        - User
      summary: response will be array of all users
      requestBody:

      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          $ref: "#/components/schemas/User"
        400:
          description: Bad request
        500:
          description: internal server error
  /user:
    get:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: response will be the details of the user who is logged in.
      requestBody:

      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: "#/components/schemas/User"
        400:
          description: Bad request
        500:
          description: internal server error
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /socket/create:
    post:
      tags:
        - Socket
      security:
        - bearerAuth: []
      summary: creating a new socket. required files are - address, latitude and longitude. optional fields is - plugType.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - address
                - latitude
                - longitude
              properties:
                address:
                  type: string
                  required: true
                latitude:
                  type: number
                  required: true
                longitude:
                  type: number
                  required: true
                plugType:
                  type: string
                  enum: [Type-A, Type-C]

      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  socket:
                    $ref: "#/components/schemas/Socket"
        400:
          description: Token Invalid
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: internal server error

  /socket:
    put:
      tags:
        - Socket
      security:
        - bearerAuth: []
      summary: Updating the status of the socket. required files are - socket id(in query) and status(in body).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [free, booked]
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: The id of the socket whose status needs to be updated.

      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  socket:
                    $ref: "#/components/schemas/Socket"
        400:
          description: Token Invalid
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: internal server error

    delete:
      tags:
        - Socket
      security:
        - bearerAuth: []
      summary: Deleting the socket. required files are - socket id(in query)
      requestBody:

      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: The id of the socket that needs to be deleted.

      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        400:
          description: Token Invalid
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: internal server error

    get:
      tags:
        - Socket
      security:
        - bearerAuth: []
      summary: Getting the details of the socket. required files are - socket id(in query)
      requestBody:

      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: The id of the socket that needs to be retrieved.

      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  socket:
                    $ref: "#/components/schemas/Socket"
        400:
          description: Token Invalid
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: internal server error
  /sockets:
    post:
      tags:
        - Socket
      security:
        - bearerAuth: []
      summary: Getting all the free sockets with 100km range from current location. required files are - coordinates(latitude and longitude of current user)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - location
              properties:
                location:
                  type: object
                  required: true
                  properties:
                    coordinates:
                      type: array
                      items:
                        type: number
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  sockets:
                    type: array
                    items:
                      type: object
                      properties:
                        socket:
                          $ref: "#/components/schemas/Socket"
        400:
          description: Token Invalid
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: internal server error

  /booking/create:
    post:
      tags:
        - Booking
      security:
        - bearerAuth: []
      summary: creating a new booking for logged in user. required files are - socket id.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - socket
              properties:
                socket:
                  type: string
                  required: true
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  booking:
                    $ref: "#/components/schemas/Booking"
        400:
          description: Token Invalid
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: internal server error

  /mybookings:
    get:
      tags:
        - Booking
      security:
        - bearerAuth: []
      summary: Getting all the bookings history of the logged in user. User should be logged in.
      requestBody:

      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  bookings:
                    type: array
                    items:
                      type: object
                      properties:
                        booking:
                          $ref: "#/components/schemas/BookingWithAddress"
        400:
          description: Token Invalid
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: internal server error

  /onebooking:
    get:
      tags:
        - Booking
      security:
        - bearerAuth: []
      summary: Getting the details of the booking. required files are - booking id(in query)
      requestBody:

      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: The id of the booking whose details needs to be retrieved.

      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  booking:
                    $ref: "#/components/schemas/BookingWithLocationAndAddress"
        400:
          description: Token Invalid
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: internal server error

  /booking/cancel:
    put:
      tags:
        - Booking
      security:
        - bearerAuth: []
      summary: Cancelling the booking. required files are - socket id(in query).
      requestBody:

      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: The id of the booking that needs to cancelled. The status of the socket will be set to free after cancelling the booking.

      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        400:
          description: Token Invalid
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: internal server error

  /booking/update:
    put:
      tags:
        - Booking
      security:
        - bearerAuth: []
      summary: Updating the booking. required files are - socket id(in query).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  required: true
                  enum: [Ongoing, Completed]
                startTime:
                  type: string
                  format: date-time
                endTime:
                  type: string
                  format: date-time
                cost:
                  type: number
                units:
                  type: number

      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: The id of the booking that needs to updated. The status of the booking will be updated along with other fields.

      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  booking:
                    $ref: "#/components/schemas/BookingComplete"
        400:
          description: Token Invalid
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          description: internal server error
